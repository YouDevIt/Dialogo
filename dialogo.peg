
%header {
void init();
void final();

struct Array {int size; int len; char** data;};

void array_init(struct Array *array, int size);
void array_free(struct Array *array);
char* array_add(struct Array *array, char* str);
char* array_get(struct Array *array, int idx);
int array_contains(struct Array *array, char* str);

const int D_NORDEST = 3;
const int D_NORDOVEST = 11;
const int D_NORD = 2;
const int D_GIU = 6;
const int D_FUORI = 7;
const int D_SUDEST = 5;
const int D_SUDOVEST = 9;
const int D_SUD = 8;
const int D_SU = 0;
const int D_DENTRO = 1;
const int D_EST = 4;
const int D_OVEST = 10;

void print_start();
void print_room(char* name);
void print_supporter(char* name);
void print_container(char* name);
void print_item(char* name);
void print_female(char* name);
void print_edible(char* name);
void print_is_in(char* name, char* loc);
void print_is_on(char* name, char* loc);
void print_descr(char* name, char* str);
void print_look(char* name, char* str);
void print_fromto(int dir, char* locfrom, char* locto);
void print_fromtoandback(int dir, char* locfrom, char* locto);

}

%source {

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Array rooms, objects;

char* last_name = NULL;
int last_genre = 0;

void array_init(struct Array* array, int size) {
	array->size = size;
	array->len = 0;
	array->data = malloc(sizeof(char*)*size);
	for(int ct = 0; ct < size; ct++) (array->data)[ct] = NULL;
}
void array_free(struct Array* array) {
	for(int ct = 0; ct < array->len; ct++)
		if(array->data[ct] != NULL) {
			free(array->data[ct]);
			array->data[ct] = NULL;
		};
	array->len = 0;
}
char* array_add(struct Array* array, char* str) {
	if(array->size == array->len) {
		array->size *= 2;
		array->data = realloc(array->data,sizeof(char*)*array->size);
	}
	return (array->data[array->len++] = strdup(str));
}
char* array_get(struct Array* array, int idx) {return idx < 0 || (idx >= array->len)? NULL: array->data[idx];}
int array_contains(struct Array* array, char* str) {
	for(int ct = 0; ct < array->len; ct++)
		if(strcmp(str,array->data[ct]) == 0)
			return 1;
	return 0;
}

void init() {
	array_init(&rooms,100);
	array_init(&objects,100);
	print_start();
}

void final() {
	array_free(&rooms);
	array_free(&objects);
}

void set_last_name(char* name) {
	if(last_name != NULL)
		free(last_name);
	last_name = strdup(name);
}

void print_start() {
}
void print_room(char* name) {
	array_add(&rooms,name);
	printf("(name #%s) %s\n",name,name);
	printf("(room #%s)\n",name);
	if(last_genre == 1)
		printf("(female #%s)\n\n",name);
}
void print_supporter(char* name) {
	array_add(&objects,name);
	printf("(name #%s) %s\n",name,name);
	printf("(supporter #%s)\n",name);
	printf("(on-seat #%s)\n",name);
	if(last_genre == 1)
		print_female(name);
}
void print_container(char* name) {
	array_add(&objects,name);
	printf("(name #%s) %s\n",name,name);
	printf("(container #%s)\n",name);
	printf("(item #%s)\n",name);
	printf("(#%s is handled)\n",name);
	printf("(openable #%s)\n",name);
	printf("(#%s is open)\n",name);
	if(last_genre == 1)
		print_female(name);
}
void print_item(char* name) {
	array_add(&objects,name);
	printf("(name #%s) %s\n",name,name);
	printf("(item #%s)\n\n",name);
	printf("(#%s is handled)\n\n",name);
	if(last_genre == 1)
		print_female(name);
}
void print_player(char* name) {
	array_add(&objects,name);
	printf("(current player #%s)\n\n",name);
}
void print_female(char* name) {
	printf("(female #%s)\n\n",name);
}
void print_edible(char* name) {
	printf("(edible #%s)\n",name);
}
void print_open(char* name) {
	printf("(#%s is open)\n",name);
}
void print_close(char* name) {
	printf("(#%s is closed)\n",name);
}
void print_is_in(char* name, char* loc) {
	printf("(#%s is #in #%s)\n\n",name,loc);
}
void print_is_on(char* name, char* loc) {
	printf("(#%s is #on #%s)\n\n",name,loc);
}
void print_descr(char* name, char* str) {
	printf("(descr #%s) %s\n\n",name,str);
}
void print_look(char* name, char* str) {
	printf("(look #%s) %s\n\n",name,str);
}
void print_appearance(char* name, char* str) {
	printf("(appearance #%s) %s\n\n",name,str);
}
char* dirs[] = {"up","in","north","northeast","east","southeast","down","out","south","southwest","west","northwest"};
void print_fromto(int dir, char* locfrom, char* locto) {
	printf("(from #%s go #%s to #%s)\n", locfrom, dirs[dir], locto);
}
void print_fromtoandback(int dir, char* locfrom, char* locto) {
	printf("(from #%s go #%s to #%s)\n", locfrom, dirs[dir], locto);
	printf("(from #%s go #%s to #%s)\n", locto, dirs[(dir+6)%12], locfrom);
}

}

statement	<-	EOL
			/ _ EOL
			/ _ "//" ( !EOL . )* EOL
			/ _ (
			ARTDET
				(
					"descrizione" SPACE PREPDI name:WORD { set_last_name((char*)name); }
					/ ("sua" SPACE)? "descrizione"
				)
				SPACE IS QUOTE str:QUOTED QUOTE {
					if(array_contains(&rooms,last_name))
						print_look(last_name,(char*)str);
					else
						print_descr(last_name,(char*)str);
				}
			/ ARTDET (
					"aspetto" SPACE PREPDI name:WORD { set_last_name((char*)name); }
					/ ("suo" SPACE)? "aspetto"
				)
				SPACE IS QUOTE str:QUOTED QUOTE { print_appearance(last_name,(char*)str); }
			/ ARTDET "giocat" (
					"ore" {last_genre = 0;}
					/ "trice" {last_genre = 1;}
				) SPACE IS name:WORD { set_last_name((char*)name); print_player((char*)name);}
			/ (
				AT dir:DIR PREPDI locfrom:WORD SPACE THEREIS ARTDET locto:WORD
				/ PREPDA locfrom:WORD SPACE "si" SPACE ("va" / "sale" / "scende" / "entra" / "esce") SPACE
					(
						AT? dir:DIR
						/ "in" SPACE dir:LOHI
						/ dir:INOUT
					)
					( ("verso" SPACE)? ARTDET / PREPA / PREPDA) locto:WORD
				/ ARTDET? locto:WORD SPACE IS AT dir:DIR PREPDI locfrom:WORD
				) (vice:NOTVICE / vice:VICE) {
					if(vice) print_fromtoandback(dir, (char*)locfrom, (char*)locto);
					else print_fromto(dir, (char*)locfrom, (char*)locto);
				}
			/ ( (ARTDET)? name:WORD { set_last_name((char*)name); } SPACE )? IS
				(
					(ARTIND "stanza" SPACE { print_room(last_name); } )?
					(
						AT dir:DIR 
						/ dir:UPDOWN
						/ dir:INOUT
					)
					( PREPDI / ARTDET / PREPDA)
					locto:WORD (vice:NOTVICE / vice:VICE) {
						if(vice) print_fromtoandback(dir, last_name, (char*)locto);
						else print_fromto(dir, last_name, (char*)locto);
					}
					/ ARTIND (
						"stanza" 		{ print_room(last_name); }
						/"supporto" 	{ print_supporter(last_name); }
						/ "contenitore" 	{ print_container(last_name); }
							(SPACE PROPCONTAINER)?
						/ "oggetto" 	{ print_item(last_name); }
							(SPACE PROPOBJECT)?
					) (SPACE
						(
							PREPIN loc:WORD	{ print_is_in(last_name, (char*)loc); }
							/ PREPSU loc:WORD	{ print_is_on(last_name, (char*)loc); }
						)
					)?
					/ PREPIN loc:WORD	{ print_is_in(last_name, (char*)loc); }
					/ PREPSU loc:WORD	{ print_is_on(last_name, (char*)loc); }
				)
			) STOP
			/ 	< ( !EOL . )* > EOL	{ fprintf(stderr,"\nSYNTAX ERROR=<%s>\n",$1); }

LOHI		<-	("alto" {$$ = D_SU;} / "basso" {$$ = D_GIU;}) SPACE

INOUT	<-	("dentro" {$$ = D_DENTRO;} / "fuori" {$$ = D_FUORI;}) SPACE

UPDOWN	<-	("sopra" {$$ = D_GIU;} / "sotto" {$$ = D_SU;}) SPACE

NOTVICE	<-	SPACE ("ma" SPACE "non" SPACE "viceversa" / "senza" SPACE "ritorno") { $$ = 0; }
VICE		<-	(SPACE ("e" SPACE "viceversa" / "con" SPACE "ritorno"))? { $$ = 1; }

DIR	<-	(	"nordest"		{ $$ = D_NORDEST; }
			/ "nordovest"	{ $$ = D_NORDOVEST; }
			/ "nord" 		{ $$ = D_NORD; }
			/ "giù"		{ $$ = D_GIU; }
			/ "dentro"		{ $$ = D_DENTRO; }
			/ "fuori"		{ $$ = D_FUORI; }
			/ "sudest"		{ $$ = D_SUDEST; }
			/ "sudovest"	{ $$ = D_SUDOVEST; }
			/ "sud" 		{ $$ = D_SUD; }
			/ "su"		{ $$ = D_SU; }
			/ "est"		{ $$ = D_EST; }
			/ "ovest"		{ $$ = D_OVEST; }
		) SPACE
				
PROPOBJECT	<-	ADJOBJECT ( ( COMMA / ( SPACE AND ) ) PROPOBJECT )?
				
ADJOBJECT	<-	"commestibile"	{ print_edible(last_name); }
				/ ADJFEMALE

PROPCONTAINER	<-	ADJCONTAINER ( ( COMMA / ( SPACE AND ) ) PROPCONTAINER )?

ADJCONTAINER		<-	"aperto"	{ print_open(last_name); }
					/ "chiuso"	{ print_close(last_name); }
					/ ADJFEMALE

ADJFEMALE	<-	"femminile"	{ print_female(last_name); }

WORD	<-	< [a-zA-Zàèéìòù]* > { $$ = (int)$1; }
QUOTED	<-	< [^\"]* > { $$ = (int)$1; }

ARTDETMS	<-	("il"/"lo"/"Il"/"Lo" ) SPACE	{last_genre = 0;}
ARTDETFS		<-	("la"/"La") SPACE		{last_genre = 1;}
ARTDETNN	<-	("l'"/"L'") _			{last_genre = 2;}

ARTDET		<-	ARTDETMS / ARTDETFS / ARTDETNN

ARTINDMS	<-	("uno"/"un") SPACE
ARTINDFS	<-	("una") SPACE / "un'" _

ARTIND	<-	ARTINDMS / ARTINDFS

PREPMS	<-	("llo"/"l") SPACE
PREPFS	<-	"lla" SPACE
PREPNN	<-	"ll'" _

PREP		<-	PREPMS / PREPFS / PREPNN
PREPDI	<-	("de"/"De") PREP / ("di"/"Di") SPACE
PREPA	<-	("a"/"A") (PREP / SPACE)
PREPDA	<-	("da"/"Da") (PREP / SPACE)
PREPIN	<-	("ne"/"Ne") PREP / ("in"/"In") SPACE
PREPSU	<-	("su"/"Su") (PREP / SPACE)

THEREIS	<-	("c'è"/"C'è") SPACE
IS		<-	("è"/"È") SPACE
AT		<-	("a"/"A") SPACE
AND		<-	"e" SPACE
SPACE	<-	[ \t]+
QUOTE	<-	_ '\"' _
COMMA	<-	_ "," _
STOP	<-	_ "." _
_		<-	[ \t]*
EOL		<-	"\n" / "\r\n" / "\r"

%%
int main(int argc, char *argv[]) {
  init();
  pcc_context_t *ctx = pcc_create(NULL);
  while (pcc_parse(ctx, NULL));
  pcc_destroy(ctx);
  final();
  return 0;
}