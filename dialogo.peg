
%value "char *"

%header {
void init();
void final();

struct Array {int size; int len; char** data;};

void array_init(struct Array *array, int size);
void array_free(struct Array *array);
char* array_add(struct Array *array, char* str);
char* array_get(struct Array *array, int idx);
int array_contains(struct Array *array, char* str);

const int D_NORDEST = 3;
const int D_NORDOVEST = 11;
const int D_NORD = 2;
const int D_GIU = 6;
const int D_FUORI = 7;
const int D_SUDEST = 5;
const int D_SUDOVEST = 9;
const int D_SUD = 8;
const int D_SU = 0;
const int D_DENTRO = 1;
const int D_EST = 4;
const int D_OVEST = 10;

void print_start();
void print_final();
void print_ident();
void _printf(const char* fmt, ...);
void print_room(char* name);
void print_supporter(char* name, int mobile);
void print_container(char* name, int mobile);
void print_object(char* name);
void print_item(char* name);
void print_handled(char* name);
void print_wearable(char* name);
void print_female(char* name);
void print_edible(char* name);
void print_openable(char* name);
void print_open(char* name);
void print_close(char* name);
void print_is_in(char* name, char* loc);
void print_is_on(char* name, char* loc);
void print_descr(char* name, char* str);
void print_look(char* name, char* str);
void print_fromto(int dir, char* locfrom, char* locto);
void print_fromtoandback(int dir, char* locfrom, char* locto);
void print_instead_of(char* azione, char* obj1, char* obj2);
void print_plaintext(char* str);

}

%source {

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Array rooms, objects, containers, supporters, vehicles;

char* last_name = NULL;
char* last_ident = NULL;
int last_genre = 0;

void array_init(struct Array* array, int size) {
	array->size = size;
	array->len = 0;
	array->data = malloc(sizeof(char*)*size);
	for(int ct = 0; ct < size; ct++) (array->data)[ct] = NULL;
}
void array_free(struct Array* array) {
	for(int ct = 0; ct < array->len; ct++)
		if(array->data[ct] != NULL) {
			free(array->data[ct]);
			array->data[ct] = NULL;
		};
	array->len = 0;
}
char* array_add(struct Array* array, char* str) {
	if(array->size == array->len) {
		array->size *= 2;
		array->data = realloc(array->data,sizeof(char*)*array->size);
	}
	return (array->data[array->len++] = strdup(str));
}
char* array_get(struct Array* array, int idx) {return idx < 0 || (idx >= array->len)? NULL: array->data[idx];}
int array_contains(struct Array* array, char* str) {
	for(int ct = 0; ct < array->len; ct++)
		if(strcmp(str,array->data[ct]) == 0)
			return 1;
	return 0;
}

void init() {
	array_init(&rooms,100);
	array_init(&objects,100);
	array_init(&containers,20);
	array_init(&supporters,20);
	array_init(&vehicles,10);
	print_start();
}

void final() {
	print_final();
	array_free(&rooms);
	array_free(&objects);
	array_free(&containers);
	array_free(&supporters);
}

void set_last_name(char* name) {
	if(last_name != NULL)
		free(last_name);
	last_name = strdup(name);
}

void print_error(char* type, char* msg) {fprintf(stderr,"\n%s=<%s>\n",type,msg);}
void print_start() {}
void print_final() {}
void _printf (const char *format, ...) {
   va_list arg;
   va_start (arg, format);
   if(last_ident)
	printf("%s",last_ident);
   vfprintf(stdout, format, arg);
   va_end (arg);
}
void print_room(char* name) {
	array_add(&rooms,name);
	_printf("(name #%s) %s\n",name,name);
	_printf("(room #%s)\n",name);
	if(last_genre == 1)
		print_female(name);
}
void print_supporter(char* name, int mobile) {
	array_add(&objects,name);
	array_add(&supporters,name);
	_printf("(name #%s) %s\n",name,name);
	_printf("(supporter #%s)\n",name);
	if(mobile) {
		array_add(&vehicles,name);
		_printf("(vehicle #%s)\n",name);
		_printf("(actor supporter #%s)\n",name);
	}
	if(last_genre == 1)
		print_female(name);
}
void print_container(char* name, int mobile) {
	array_add(&objects,name);
	array_add(&containers,name);
	_printf("(name #%s) %s\n",name,name);
	_printf("(container #%s)\n",name);
	if(mobile) {
		array_add(&vehicles,name);
		_printf("(vehicle #%s)\n",name);
		_printf("(actor container #%s)\n",name);
	}
	if(last_genre == 1)
		print_female(name);
}
void print_object(char* name) {
	array_add(&objects,name);
	_printf("(name #%s) %s\n",name,name);
	print_item(name);
	if(last_genre == 1)
		print_female(name);
}
void print_player(char* name) {
	array_add(&objects,name);
	_printf("(current player #%s)\n",name);
}
void print_female(char* name) {_printf("(female #%s)\n",name);}
void print_item(char* name) {_printf("(item #%s)\n",name);}
void print_handled(char* name) {_printf("(#%s is handled)\n",name);}
void print_edible(char* name) {_printf("(edible #%s)\n",name);}
void print_wearable(char* name) {_printf("(wearable #%s)\n",name);}
void print_openable(char* name) {_printf("(openable #%s)\n",name);}
void print_open(char* name) {_printf("(#%s is open)\n",name);}
void print_close(char* name) {_printf("(#%s is closed)\n",name);}
void print_is_in(char* name, char* loc) {_printf("(#%s is #in #%s)\n",name,loc);}
void print_is_on(char* name, char* loc) {_printf("(#%s is #on #%s)\n",name,loc);}
void print_descr(char* name, char* str) {_printf("(descr #%s) %s\n",name,str);}
void print_look(char* name, char* str) {_printf("(look #%s) %s\n",name,str);}
void print_appearance(char* name, char* str) {_printf("(appearance #%s) %s\n",name,str);}
char* dirs[] = {"up","in","north","northeast","east","southeast","down","out","south","southwest","west","northwest"};
void print_fromto(int dir, char* locfrom, char* locto) {_printf("(from #%s go #%s to #%s)\n", locfrom, dirs[dir], locto);}
void print_fromtoandback(int dir, char* locfrom, char* locto) {
        print_fromto(dir,locfrom,locto);
        print_fromto((dir+6)%12,locto,locfrom);
}
const int actions_count = 1;
char* actions_it[] = {"mangiare"};
char* actions_en[] = {"eat"};
void print_instead_of(char* azione, char* obj1, char* obj2) {
	char* action = NULL;
	for(int ct = 0; ct < actions_count; ct++) {
		if(strcmp(azione,actions_it[ct]) == 0) {
			action = actions_en[ct];
			break;
		}
	}
	if(action == NULL) {
		print_error("AZIONE SCONOSCIUTA",azione);
		return;
	}
	_printf("(instead of [%s %s %s])",action,obj1,obj2);
}
void print_plaintext(char* str) {printf("%s ",str);}

}

sentence	<-	EOL	_ EOL IDENT	 { printf("\n"); }
			/ EOL IDENT
			/ "//" ( !EOL . )* EOL IDENT
			/ [Ii] "nvece" SPACE "di" SPACE verb:WORD SPACE "qualcosa" COLON
				{ print_instead_of(verb,"$",""); }
			/ (
			ARTDET
				(
					"descrizione" SPACE PREPDI name:WORD { set_last_name(name); }
					/ ("sua" SPACE)? "descrizione"
				)
				SPACE IS str:QUOTED {
					if(array_contains(&rooms,last_name))
						print_look(last_name,(char*)str);
					else
						print_descr(last_name,(char*)str);
				}
			/ ARTDET (
					"aspetto" SPACE PREPDI name:WORD { set_last_name(name); }
					/ ("suo" SPACE)? "aspetto"
				)
				SPACE IS str:QUOTED { print_appearance(last_name,str); }
			/ ARTDET "giocat" (
					"ore" {last_genre = 0;}
					/ "trice" {last_genre = 1;}
				) SPACE IS name:WORD { set_last_name(name); print_player(name);}
			/ (
				AT dir:DIR PREPDI locfrom:WORD SPACE THEREIS ARTDET locto:WORD
				/ PREPDA locfrom:WORD SPACE "si" SPACE ("va" / "sale" / "scende" / "entra" / "esce") SPACE
					(
						AT? dir:DIR
						/ "in" SPACE dir:LOHI
						/ dir:INOUT
					)
					( ("verso" SPACE)? ARTDET / PREPA / PREPDA) locto:WORD
				/ ARTDET? locto:WORD SPACE IS AT dir:DIR PREPDI locfrom:WORD
				) (vice:NOTVICE / vice:VICE) {
					if(vice) print_fromtoandback((int)dir, locfrom, locto);
					else print_fromto((int)dir, locfrom, locto);
				}
			/ ( (ARTDET)? name:WORD { set_last_name(name); } SPACE )? IS
				(
					(ARTIND "stanza" SPACE { print_room(last_name); } )?
					(
						AT dir:DIR 
						/ dir:UPDOWN
						/ dir:INOUT
					)
					( PREPDI / ARTDET / PREPDA)
					locto:WORD (vice:NOTVICE / vice:VICE) {
						if(vice) print_fromtoandback((int)dir, locto, last_name);
						else print_fromto((int)dir, locto, last_name);
					}
					/ ARTIND (
						"stanza" 		{ print_room(last_name); }
						/ "veicolo"		{ print_container(last_name, 1); }
							(SPACE PROPVEHICLE)?
						/ "supporto" SPACE "mobile"	{ print_supporter(last_name, 1); }
							(SPACE PROPVEHICLE)?
						/ "supporto" 	{ print_supporter(last_name, 0); }
							(SPACE PROPOBJECT)?
						/ "contenitore" 	{ print_container(last_name, 0); }
							(SPACE PROPCONTAINER)?
						/ "oggetto" 	{ print_object(last_name); }
							(SPACE PROPOBJECT)?
						/ { print_object(last_name); } PROPOBJECT
					) (SPACE
						(
							PREPIN loc:WORD	{ print_is_in(last_name, loc); }
							/ PREPSU loc:WORD	{ print_is_on(last_name, loc); }
						)
					)?
					/ PREPIN loc:WORD	{ print_is_in(last_name, loc); }
					/ PREPSU loc:WORD	{ print_is_on(last_name, loc); }
				)
			) STOP
			/ str:QUOTED ("." _ )?	{ print_plaintext(str); }
			/ < ( !EOL . )* > EOL	{ print_error("ERRORE DI SINTASSI",(char*)$1); }

LOHI		<-	("alto" {$$ = (char*)D_SU;} / "basso" {$$ = (char*)D_GIU;}) SPACE
INOUT	<-	("dentro" {$$ = (char*)D_DENTRO;} / "fuori" {$$ = (char*)D_FUORI;}) SPACE
UPDOWN	<-	("sopra" {$$ = (char*)D_GIU;} / "sotto" {$$ = (char*)D_SU;}) SPACE

NOTVICE	<-	SPACE ("ma" SPACE "non" SPACE "viceversa" / "senza" SPACE "ritorno") { $$ = (char*)0; }
VICE		<-	(SPACE ("e" SPACE "viceversa" / "con" SPACE "ritorno"))? { $$ = (char*)1; }

DIR	<-	(	"nordest"		{ $$ = (char*)D_NORDEST; }
			/ "nordovest"	{ $$ = (char*)D_NORDOVEST; }
			/ "nord" 		{ $$ = (char*)D_NORD; }
			/ "giÃ¹"		{ $$ = (char*)D_GIU; }
			/ "dentro"		{ $$ = (char*)D_DENTRO; }
			/ "fuori"		{ $$ = (char*)D_FUORI; }
			/ "sudest"		{ $$ = (char*)D_SUDEST; }
			/ "sudovest"	{ $$ = (char*)D_SUDOVEST; }
			/ "sud" 		{ $$ = (char*)D_SUD; }
			/ "su"		{ $$ = (char*)D_SU; }
			/ "est"		{ $$ = (char*)D_EST; }
			/ "ovest"		{ $$ = (char*)D_OVEST; }
		) SPACE

ADJMALE		<-	"maschile"
ADJFEMALE	<-	"femminile"	{ print_female(last_name); }
ADJGENRE		<-	ADJMALE / ADJFEMALE

PROPOBJECT	<-	ADJOBJECT ( ( COMMA / ( SPACE AND ) ) PROPOBJECT )?
ADJOBJECT	<-	"commestibile"	{ print_edible(last_name); }
				/ "portatile"	{ print_item(last_name); }
				/ "maneggiato"	{ print_handled(last_name); }
				/ "indossabile"	{ print_wearable(last_name); }
				/ ADJGENRE

PROPVEHICLE	<-	ADJVEHICLE ( ( COMMA / ( SPACE AND ) ) PROPVEHICLE )?
ADJVEHICLE	<-	ADJOBJECT

PROPCONTAINER	<-	ADJCONTAINER ( ( COMMA / ( SPACE AND ) ) PROPCONTAINER )?
ADJCONTAINER		<-	"aperto"	{ print_open(last_name); }
					/ "chiuso"	{ print_close(last_name); }
					/ ADJOBJECT

WORD	<-	< [a-zA-ZÃ Ã¨Ã©Ã¬Ã²Ã¹]* > { $$ = (char*)$1; }

QUOTED	<-	QUOTE < [^\"]* > QUOTE { $$ = (char*)$1; }

ARTDETMS	<-	("il"/"lo"/"Il"/"Lo" ) SPACE	{last_genre = 0;}
ARTDETFS		<-	("la"/"La") SPACE		{last_genre = 1;}
ARTDETNN	<-	("l'"/"L'") _			{last_genre = 2;}

ARTDET		<-	ARTDETMS / ARTDETFS / ARTDETNN

ARTINDMS	<-	("uno"/"un") SPACE
ARTINDFS	<-	("una") SPACE / "un'" _

ARTIND	<-	ARTINDMS / ARTINDFS

PREPMS	<-	("llo"/"l") SPACE
PREPFS	<-	"lla" SPACE
PREPNN	<-	"ll'" _

PREP		<-	PREPMS / PREPFS / PREPNN
PREPDI	<-	("de"/"De") PREP / ("di"/"Di") SPACE
PREPA	<-	("a"/"A") (PREP / SPACE)
PREPDA	<-	("da"/"Da") (PREP / SPACE)
PREPIN	<-	("ne"/"Ne") PREP / ("in"/"In") SPACE
PREPSU	<-	("su"/"Su") (PREP / SPACE)

THEREIS	<-	("c'Ã¨"/"C'Ã¨") SPACE
IS		<-	("Ã¨"/"Ã") SPACE
AT		<-	("a"/"A") SPACE
AND		<-	"e" SPACE
SPACE	<-	[ \t]+
QUOTE	<-	_ '\"' _
COMMA	<-	_ "," _
COLON	<-	_ ":" _
STOP	<-	_ "." _
IDENT	<-	< SPACE > { last_ident = (char*)$1; } / { last_ident = ""; }
_		<-	[ \t]*
EOL		<-	"\n" / "\r\n" / "\r"

%%
int main(int argc, char *argv[]) {
  init();
  pcc_context_t *ctx = pcc_create(NULL);
  while (pcc_parse(ctx, NULL));
  pcc_destroy(ctx);
  final();
  return 0;
}